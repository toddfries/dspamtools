#!/usr/bin/perl

# Copyright (c) 2012,2014 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use FDC::db;
use DBI qw(:sql_types);
use Sys::Syslog qw(:standard :macros);

use OpenBSD::Getopt;

our $opt_v = 0;

getopts('v');

our $verbose = $opt_v;

openlog("dspam_sigstash", "ndelay,pid", "mail");

our $dsn = "dbi:Pg:dbname=dspam;host=db.freedaemonhosting.com";

my $conf = "$ENV{HOME}/.dspamsig.conf";
if (-f $conf) {
	eval `cat $conf`;
}

my $db;
$db = FDC::db->new($dsn,"dspam","");
if (!defined($db)) {
	syslog(LOG_INFO, "Could not open dsn: $dsn: $@");
	die "Could not open $dsn: $@";
}
my $dbh = $db->getdbh();
my @tables = $dbh->tables();

my $sigtab = "fdhsignatures";
my $inoctab = "fdhinoculations";
my $create_sigtab = 1;
my $create_inoctab = 1;
foreach my $tname (@tables) {
	if ($tname =~ m/${sigtab}/) {
		$create_sigtab = 0;
	}
	if ($tname =~ m/${inoctab}/) {
		$create_inoctab = 0;
	}
}

my $query;
if ($create_sigtab > 0) {
	$query = "CREATE TABLE ${sigtab} (id serial, ".
	    "action varchar(16), sig varchar(28))";
	$db->doquery($query) || die "Unable to create ${sigtab}: $@";
}
if ($create_inoctab > 0) {
	$query = "CREATE TABLE ${inoctab} (".
	    "id serial, ".
	    "message TEXT)";
	$db->doquery($query) || die "Unable to create ${inoctab}: $@";
}

my $action = shift @ARGV;


my @sigs = ();
if (defined($ARGV[0])) {
	@sigs = @ARGV;
} else {
	my $line;
	while (<stdin>) {
		chomp($line = $_);
		push @sigs,$line;
		if ($verbose > 0) {
			syslog(LOG_INFO, sprintf("Added sig '%s'",$line));
		}
	}
}
foreach my $sig (@sigs) {

	my $sth;
	if ($action eq "inoculation") {
		$query = sprintf "INSERT into %s (message) values (?)", $inoctab;
		$sth = $db->{dbh}->prepare($query);
		my $message = "";
		while(<STDIN>) {
			$message .= $_;
		}
		$sth->bind_param(1, $message, SQL_CHAR);
		$sth->execute;
	} else {
		if (!defined($sig)) {
			next;
		}
		$query = sprintf "INSERT into %s (action, sig) values ('%s', '%s')", $sigtab, $action, $sig;
		if ($verbose > 0) {
			syslog(LOG_INFO, sprintf("query: %s\n",$query));
		}
		while (1) {
			if (! ($sth = $db->doquery($query, 'insert sig'))) {
				sleep(1);
				next;
			}
			if (!defined($sth) || $sth == -1) {
				sleep(1);
				next;
			}
			last;
		}
	}
	$sth->finish;
}
$dbh->disconnect;
exit(0);
