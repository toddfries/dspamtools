#!/usr/bin/perl

# Copyright (c) 2012,2015 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Sys::Syslog qw(:standard :macros);

openlog("dspamc_wrapper", "ndelay,pid", "mail");
our $starttime = time();

# Is there a better way to insert a header than to futz in this way?

my $verbose = 0;
if (defined($ARGV[0]) && $ARGV[0] eq "-v") {
	shift @ARGV;
}

my $rcpt = $ARGV[0];
my $envfrom = $ARGV[1];

my $config_file = "/etc/dspamwrap.conf";

my $skiptore;
my $scan = 1;
my $maxmessagesize = 1048576;

if (-f $config_file) {
	eval {
		eval `cat $config_file`;
	}
}

if (!defined($rcpt) || !defined($envfrom)) {
	print STDERR "Usage: dspamc_wrapper <rcpt> <from>\n";
	exit(1);
}

syslog(LOG_INFO, sprintf("%s -> %s", $envfrom, $rcpt));

if ($scan == 1 && defined($skiptore)) {
	if ($rcpt =~ m/${skiptore}/i) {
		$scan = 0;
	}
}


my ($fhread, $fhwrite);
our $pid;
if ($verbose > 0) {
	syslog(LOG_INFO, sprintf("scan=%d\n",$scan));
}

if ($scan) {
	use IPC::Open2;
	use FileHandle;

	$SIG{'PIPE'} = 'IGNORE';

	my $cmd = sprintf "%s --client --stdout --deliver=innocent,spam --user %s",
	    "/usr/local/bin/dspamc",lc($rcpt);
	if ($verbose > 0) {
		syslog(LOG_INFO,sprintf("cmd=%d\n",$cmd));
	}

	$pid = open2($fhread,$fhwrite,${cmd});
	if (!defined($pid)) {
		die "Can't fork: $!";
	}
	if ($verbose > 0) {
		syslog(LOG_INFO,sprintf("pid=%d\n",$pid));
	}
	$SIG{'TERM'} = sub {
		my $signame = shift;
		syslog(LOG_INFO,"Got %s, killing child pid %d", $signame, $pid);
		kill('KILL', $pid);
		exit(75);
	};
}
my @headers;
my @body;
my $state = 0; # 0 = headers, 1 = body
my $linecount = 0;
my $msgsize = 0;
my $scansize = 0;
while(<STDIN>) {
	my $line = $_;
	$msgsize += length($line);
	if ($verbose > 0 && ($linecount++ % 1000) == 0) {
		syslog(LOG_INFO,sprintf("made it to line %d\n",$linecount));
	}
	# do not train based on X-(DSPAM|FDH)- headers, so show them below
	if ($state == 0) {
		if (/^$/) {
			$state++;
			if ($scan) {
				if ($verbose > 0) {
					syslog(LOG_INFO,sprintf("pre-fhwrite: %s",$_));
				}
				eval {
					$fhwrite->print($_);
				};
				if ($@) {
					syslog(LOG_INFO,sprintf("FHWRITE failed: %s\n",$@));
				}
				if ($verbose > 0) {
					syslog(LOG_INFO,sprintf("post-fhwrite: %s",$_));
				}

			}
			next;
		}
		if ($scan == 1 && (/^X-o?DSPAM-/ || /^X-o?FDH-/)) {
			$line =~ s/-(DSPAM|FDH)-/-o${1}-/;
			push @headers,$line;
			next;
		}
		push @headers,$line;
		if ($scan) {
			eval {
				$fhwrite->print($_);
			};
			if ($@) {
				syslog(LOG_INFO,sprintf("FHWRITE failed: %s\n",$@));
			}
		}
		next;
	}
	push @body,$line;
	if ($scan && $msgsize < $maxmessagesize) {
		$scansize = $msgsize;
		eval {
			$fhwrite->print($_);
		};
		if ($@) {
			syslog(LOG_INFO,sprintf("FHWRITE failed: %s\n",$@));
		}
	}
}
if ($verbose > 0) {
	print STDERR "STDIN reading done\n";
}
if ($scan) {
	eval {
		$fhwrite->flush();
		$fhwrite->close();
	};
	if ($@) {
		syslog(LOG_INFO,sprintf("FHWRITE failed: %s\n",$@));
	}

	# states:
	#
	# 0 = starting
	# 1 = Seen first header
	
	
	$state = 0;
	eval {
	while(<$fhread>) {
		if ($state == 0) {
			if (/^X-DSPAM/) {
				push @headers,$_;
			}
			if (/^$/) {
				$state++;
				last;
			}
		}
		next;
	}
	$fhread->close();
	};
	if ($@) {
		syslog(LOG_INFO,sprintf("FHREAD failed: %s\n",$@));
	}
}
foreach my $h (@headers) {
	printf "%s", $h;
}
printf "X-FDH-EnvFrom: %s\n", $envfrom;
printf "X-FDH-EnvTo: %s\n\n", $rcpt;
foreach my $b (@body) {
	printf "%s", $b;
}

our $stoptime = time();
our $totaltime = $stoptime - $starttime;
if ($scan) {
	my $ret = waitpid($pid, 0);

	my $bsent;
	if ($scansize < $msgsize) {
		$bsent = sprintf("%d",$scansize);
	} else {
		$bsent = sprintf("%d/%d",$scansize,$msgsize);
	}
	syslog(LOG_INFO,sprintf("ret=%d: sent %sb in %ds, %0.3fb/s", $ret, $bsent, $totaltime, $scansize/$totaltime));

	if ($verbose > 0) {
		syslog(LOG_INFO,sprintf("waitpid returned %d: status=$? native=${^CHILD_ERROR_NATIVE}\n",$ret));
	}
	if ($ret == $pid) {
		exit(0);
	}
	if ($ret == -1) {
		exit(0);
	}
	exit(75); # tempfail
}
closelog();
exit(0);
